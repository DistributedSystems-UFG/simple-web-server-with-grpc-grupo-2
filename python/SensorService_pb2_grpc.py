# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import SensorService_pb2 as SensorService__pb2


class SensorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddTemperatureData = channel.unary_unary(
                '/SensorService/AddTemperatureData',
                request_serializer=SensorService__pb2.TemperatureData.SerializeToString,
                response_deserializer=SensorService__pb2.StatusReply.FromString,
                )
        self.GetTemperatureByLocalization = channel.unary_unary(
                '/SensorService/GetTemperatureByLocalization',
                request_serializer=SensorService__pb2.LocalizationRange.SerializeToString,
                response_deserializer=SensorService__pb2.ListTemperatureData.FromString,
                )
        self.GetTemperatureByDate = channel.unary_unary(
                '/SensorService/GetTemperatureByDate',
                request_serializer=SensorService__pb2.DateRange.SerializeToString,
                response_deserializer=SensorService__pb2.ListTemperatureData.FromString,
                )


class SensorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddTemperatureData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTemperatureByLocalization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTemperatureByDate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SensorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddTemperatureData': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTemperatureData,
                    request_deserializer=SensorService__pb2.TemperatureData.FromString,
                    response_serializer=SensorService__pb2.StatusReply.SerializeToString,
            ),
            'GetTemperatureByLocalization': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTemperatureByLocalization,
                    request_deserializer=SensorService__pb2.LocalizationRange.FromString,
                    response_serializer=SensorService__pb2.ListTemperatureData.SerializeToString,
            ),
            'GetTemperatureByDate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTemperatureByDate,
                    request_deserializer=SensorService__pb2.DateRange.FromString,
                    response_serializer=SensorService__pb2.ListTemperatureData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SensorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SensorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddTemperatureData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SensorService/AddTemperatureData',
            SensorService__pb2.TemperatureData.SerializeToString,
            SensorService__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTemperatureByLocalization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SensorService/GetTemperatureByLocalization',
            SensorService__pb2.LocalizationRange.SerializeToString,
            SensorService__pb2.ListTemperatureData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTemperatureByDate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SensorService/GetTemperatureByDate',
            SensorService__pb2.DateRange.SerializeToString,
            SensorService__pb2.ListTemperatureData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
